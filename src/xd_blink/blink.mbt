pub(all) struct BlinkObject {
  cool_time : Int
  delay_at_maturity : Int
  mut remain_cool_time : Int
  mut counter : Int
}

let thresh : Array[UInt] = [
  0x0001, 0x002C, 0x0056, 0x0080, 0x00A8, 0x00D0, 0x00F7, 0x011D, 0x0142, 0x0166,
  0x018A, 0x01AC, 0x01CE, 0x01EF, 0x020F, 0x022E, 0x024C, 0x0269, 0x0285, 0x02A1,
  0x02BC, 0x02D5, 0x02EE, 0x0306, 0x031D, 0x0334, 0x0349, 0x035E, 0x0371, 0x0384,
  0x0396, 0x03A7, 0x03B7, 0x03C7, 0x03D5, 0x03E2, 0x03EF, 0x03FB, 0x0406, 0x0410,
  0x0419, 0x0421, 0x0429, 0x042F, 0x0435, 0x043A, 0x043E, 0x0441, 0x0443, 0x0444,
  0x0445, 0x0445, 0x0445, 0x0445, 0x0445, 0x0445, 0x0445, 0x0445, 0x0445, 0x0445,
  0x0445, 0x0445, 0x0445, 0x0445, 0x0445, 0x0445, 0x0445, 0x0445, 0x0445, 0x0445,
  0x0445, 0x0445, 0x0445, 0x0445, 0x0445, 0x0445, 0x0445, 0x0445, 0x0445, 0x0445,
  0x0445, 0x0445, 0x0445, 0x0445, 0x0445, 0x0445, 0x0445, 0x0445, 0x0445, 0x0445,
  0x0445, 0x0445, 0x0445, 0x0445, 0x0445, 0x0445, 0x0445, 0x0445, 0x0445, 0x0445,
  0x0445, 0x0445, 0x0445, 0x0445, 0x0445, 0x0445, 0x0445, 0x0445, 0x0445, 0x0445,
  0x0445, 0x0445, 0x0445, 0x0445, 0x0445, 0x0445, 0x0445, 0x0445, 0x0445, 0x0445,
  0x0445, 0x0445, 0x0445, 0x0445, 0x0445, 0x0445, 0x0445, 0x0445, 0x0445, 0x0445,
  0x0445, 0x0445, 0x0445, 0x0445, 0x0445, 0x0445, 0x0445, 0x0445, 0x0445, 0x0445,
  0x0445, 0x0445, 0x0445, 0x0445, 0x0445, 0x0445, 0x0445, 0x0445, 0x0445, 0x0445,
  0x0445, 0x0445, 0x0445, 0x0445, 0x0445, 0x0445, 0x0445, 0x0445, 0x0445, 0x0445,
  0x0445, 0x0445, 0x0445, 0x0445, 0x0445, 0x0445, 0x0445, 0x0445, 0x0445, 0x0445,
  0x10000, 0x10000,
]

pub fn BlinkObject::new(
  cool_time : Int,
  init_cnt~ : Int = 0,
  delay_at_maturity~ : Int = 0
) -> BlinkObject {
  { cool_time, delay_at_maturity, remain_cool_time: 0, counter: init_cnt }
}

pub fn count_up(self : BlinkObject, lcg : @lcg.Lcg32Ref) -> Bool {
  self.remain_cool_time = self.remain_cool_time - 1
  if self.remain_cool_time >= 0 {
    return false
  }
  self.counter = self.counter + 1
  if self.counter <= 10 {
    return false
  }

  //
  let rand = lcg.get_rand()
  if self.counter < 180 && rand >= thresh[self.counter - 10] {
    return false
  }
  if 180 <= self.counter && self.counter < 180 + self.delay_at_maturity {
    return false
  }
  self.counter = 0
  self.remain_cool_time = self.cool_time
  true
}

test {
  let lcg = @lcg.Lcg32(0x002E5B77).to_ref()
  let obj = BlinkObject::new(4)
  for i = 0; i < 300; i = i + 1 {
    let _ = obj.count_up(lcg)

  }
  assert_eq!(lcg.to_string(), "1e7a40bb")
  assert_eq!(obj.counter, 116)
}
